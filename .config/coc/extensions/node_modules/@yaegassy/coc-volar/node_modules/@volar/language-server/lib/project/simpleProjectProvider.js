"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkspaceFolder = exports.createServiceEnvironment = exports.createSimpleProjectProvider = void 0;
const vscode_uri_1 = require("vscode-uri");
const uri_1 = require("../uri");
const simpleProject_1 = require("./simpleProject");
function createSimpleProjectProvider(languagePlugins) {
    const map = new Map();
    return {
        get(uri) {
            const workspaceFolder = getWorkspaceFolder(uri, this.workspaceFolders);
            let projectPromise = map.get(workspaceFolder);
            if (!projectPromise) {
                const serviceEnv = createServiceEnvironment(this, workspaceFolder);
                projectPromise = (0, simpleProject_1.createSimpleServerProject)(this, serviceEnv, languagePlugins);
                map.set(workspaceFolder, projectPromise);
            }
            return projectPromise;
        },
        async all() {
            return await Promise.all([...map.values()]);
        },
        reload() {
            for (const project of map.values()) {
                project.then(p => p.dispose());
            }
            map.clear();
        },
    };
}
exports.createSimpleProjectProvider = createSimpleProjectProvider;
function createServiceEnvironment(server, workspaceFolder) {
    return {
        workspaceFolder,
        fs: server.fs,
        locale: server.initializeParams?.locale,
        clientCapabilities: server.initializeParams?.capabilities,
        getConfiguration: server.getConfiguration,
        onDidChangeConfiguration: server.onDidChangeConfiguration,
        onDidChangeWatchedFiles: server.onDidChangeWatchedFiles,
        typescript: {
            fileNameToUri: uri_1.fileNameToUri,
            uriToFileName: uri_1.uriToFileName,
        },
    };
}
exports.createServiceEnvironment = createServiceEnvironment;
function getWorkspaceFolder(uri, workspaceFolders) {
    let parsed = vscode_uri_1.URI.parse(uri);
    while (true) {
        if (workspaceFolders.uriHas(parsed.toString())) {
            return parsed.toString();
        }
        const next = vscode_uri_1.URI.parse(uri).with({ path: parsed.path.substring(0, parsed.path.lastIndexOf('/')) });
        if (next.path === parsed.path) {
            break;
        }
        parsed = next;
    }
    for (const folder of workspaceFolders.uriKeys()) {
        return folder;
    }
    return vscode_uri_1.URI.parse(uri).with({ path: '/' }).toString();
}
exports.getWorkspaceFolder = getWorkspaceFolder;
//# sourceMappingURL=simpleProjectProvider.js.map