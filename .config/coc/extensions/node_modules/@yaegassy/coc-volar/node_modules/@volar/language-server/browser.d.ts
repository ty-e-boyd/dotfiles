import * as vscode from 'vscode-languageserver/browser';
export * from 'vscode-languageserver/browser';
export * from './index';
export * from './lib/project/simpleProjectProvider';
export * from './lib/project/typescriptProjectProvider';
export * from './lib/server';
export declare function createConnection(): vscode.Connection;
export declare function createServer(connection: vscode.Connection): {
    connection: vscode.Connection;
    initializeParams: import("./index").VolarInitializeParams;
    languageServicePlugins: import("@volar/language-service").LanguageServicePlugin<any>[];
    projects: import("./index").ServerProjectProvider;
    fs: import("@volar/language-service").FileSystem;
    semanticTokensLegend: vscode.SemanticTokensLegend;
    pullModelDiagnostics: boolean;
    documents: vscode.TextDocuments<import("@volar/snapshot-document/lib/snapshotDocument").SnapshotDocument>;
    workspaceFolders: {
        clear: () => void;
        values: () => IterableIterator<boolean>;
        uriKeys: () => IterableIterator<string>;
        uriDelete: (_uri: string) => boolean;
        uriGet: (_uri: string) => boolean | undefined;
        uriHas: (_uri: string) => boolean;
        uriSet: (_uri: string, item: boolean) => void;
        pathDelete: (path: string) => boolean;
        pathGet: (path: string) => boolean | undefined;
        pathHas: (path: string) => boolean | undefined;
        pathSet: (path: string, item: boolean) => void;
    };
    initialize: (initializeParams: import("./index").VolarInitializeParams, languageServicePlugins: import("@volar/language-service").LanguageServicePlugin<any>[], projects: import("./index").ServerProjectProvider, options?: {
        semanticTokensLegend?: vscode.SemanticTokensLegend | undefined;
        pullModelDiagnostics?: boolean | undefined;
    } | undefined) => vscode.InitializeResult<any>;
    initialized: () => void;
    shutdown: () => Promise<void>;
    watchFiles: (patterns: string[]) => void;
    getConfiguration: <T>(section: string, scopeUri?: string | undefined) => Promise<T | undefined>;
    onDidChangeConfiguration: (cb: vscode.NotificationHandler<vscode.DidChangeConfigurationParams>) => {
        dispose(): void;
    };
    onDidChangeWatchedFiles: (cb: vscode.NotificationHandler<vscode.DidChangeWatchedFilesParams>) => {
        dispose: () => void;
    };
    clearPushDiagnostics: () => void;
    refresh: (projects: import("./index").ServerProjectProvider) => Promise<void>;
};
export declare function loadTsdkByUrl(tsdkUrl: string, locale: string | undefined): Promise<{
    typescript: typeof import("typescript");
    diagnosticMessages: import("typescript").MapLike<string> | undefined;
}>;
