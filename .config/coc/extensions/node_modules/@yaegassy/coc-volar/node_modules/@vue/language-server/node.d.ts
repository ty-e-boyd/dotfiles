import type { Connection } from '@volar/language-server';
import { GetLanguagePlugin } from './lib/hybridModeProject';
export declare const connection: Connection;
export declare const server: {
    connection: Connection;
    initializeParams: import("@volar/language-server").VolarInitializeParams;
    languageServicePlugins: import("@volar/language-server").LanguageServicePlugin<any>[];
    projects: import("@volar/language-server").ServerProjectProvider;
    fs: import("@volar/language-server").FileSystem;
    semanticTokensLegend: import("@volar/language-server").SemanticTokensLegend;
    pullModelDiagnostics: boolean;
    documents: import("@volar/language-server").TextDocuments<import("@volar/language-server/node").SnapshotDocument>;
    workspaceFolders: {
        clear: () => void;
        values: () => IterableIterator<boolean>;
        uriKeys: () => IterableIterator<string>;
        uriDelete: (_uri: string) => boolean;
        uriGet: (_uri: string) => boolean | undefined;
        uriHas: (_uri: string) => boolean;
        uriSet: (_uri: string, item: boolean) => void;
        pathDelete: (path: string) => boolean;
        pathGet: (path: string) => boolean | undefined;
        pathHas: (path: string) => boolean | undefined;
        pathSet: (path: string, item: boolean) => void;
    };
    initialize: (initializeParams: import("@volar/language-server").VolarInitializeParams, languageServicePlugins: import("@volar/language-server").LanguageServicePlugin<any>[], projects: import("@volar/language-server").ServerProjectProvider, options?: {
        semanticTokensLegend?: import("@volar/language-server").SemanticTokensLegend | undefined;
        pullModelDiagnostics?: boolean | undefined;
    } | undefined) => import("@volar/language-server").InitializeResult<any>;
    initialized: () => void;
    shutdown: () => Promise<void>;
    watchFiles: (patterns: string[]) => void;
    getConfiguration: <T>(section: string, scopeUri?: string | undefined) => Promise<T | undefined>;
    onDidChangeConfiguration: (cb: import("@volar/language-server").NotificationHandler<import("@volar/language-server").DidChangeConfigurationParams>) => {
        dispose(): void;
    };
    onDidChangeWatchedFiles: (cb: import("@volar/language-server").NotificationHandler<import("@volar/language-server").DidChangeWatchedFilesParams>) => {
        dispose: () => void;
    };
    clearPushDiagnostics: () => void;
    refresh: (projects: import("@volar/language-server").ServerProjectProvider) => Promise<void>;
};
export declare const getLanguagePlugins: GetLanguagePlugin;
